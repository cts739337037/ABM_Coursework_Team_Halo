globals [
  color-mode       ;; 0 = normal, 1 = when heard, 2 = times heard
]

patches-own [
  times-heard    ;; tracks times the rumor has been heard

  ;; Clock tick when first heard the rumor. -1 means that a patch hasn't heard the rumor.
  ;; 0 means that the rumor was seeded with the rumor in setup.
  first-heard
]

;;; setup procedures

to setup [seed-one?]
  clear-all
  set color-mode 0
  ask patches [
    set first-heard -1
    set times-heard 0
    recolor
  ]
  ifelse seed-one? [
    seed-one
  ] [
    seed-random
  ]
  reset-ticks
end

to seed-one
  ;; tell the center patch the rumor
  ask patch 0 0 [
    hear-rumor
  ]
end

to seed-random
  ;; seed with random number of rumor sources governed by init-clique slider
  ask patches with [times-heard = 0] [
    if (random-float 100.0) < init-clique [
      hear-rumor
    ]
  ]
end

to go
  if all? patches [times-heard > 0] [ stop ]
  ask patches with [ times-heard > 0 ] [ spread-rumor ]
  tick
end

to spread-rumor  ;; patch procedure
  let neighbor nobody
  ifelse eight-mode? [
    set neighbor one-of neighbors
  ] [
    set neighbor one-of neighbors4
  ]
  ;; Spread the rumor
  ask neighbor [ hear-rumor ]
end

to hear-rumor  ;; patch procedure
  ;; If RESET-TICKS hasn't been called, we need to set FIRST-HEARD to 0. Unfortunately,
  ;; the only way to know if RESET-TICKS hasn't been called yet is to try to get the TICKS
  ;; and catch the ensuing error. On normal ticks, we use TICKS + 1 because that's going
  ;; to be the tick on which this patch will be included in statistics.
  if not heard-rumor? [
    carefully [
      set first-heard ticks + 1
    ] [
      set first-heard 0
    ]
  ]
  set times-heard times-heard + 1
  recolor
end

;;; coloring procedures

to recolor  ;; patch procedure
  ifelse color-mode = 0 [
    recolor-normal
  ] [
    ifelse color-mode = 1 [
      recolor-by-when-heard
    ] [
      recolor-by-times-heard
    ]
  ]
end

to recolor-normal  ;; patch procedure
  ifelse heard-rumor? [
    set pcolor red
  ] [
    set pcolor blue
  ]
end

to recolor-by-when-heard  ;; patch procedure
  ifelse heard-rumor? [
    set pcolor scale-color yellow first-heard world-width 0
  ] [
    set pcolor black
  ]
end

to recolor-by-times-heard   ;; patch procedure
  set pcolor scale-color green times-heard 0 world-width
end

;;; mouse handling

to spread-rumor-with-mouse
  if mouse-down? [
    ask patch mouse-xcor mouse-ycor [
      hear-rumor
    ]
    display
  ]
end

to-report heard-rumor?
  report first-heard >= 0
end

to-report clique
  report count patches with [ heard-rumor? ]
end

to-report previous-clique
  report count patches with [ heard-rumor? and first-heard < ticks ]
end


; Copyright 1997 Uri Wilensky.
; See Info tab for full copyright and license.
